---
-- https://shellcode.blog/services
---

--Usage:
--nmap -script Telepad_check_script.nse -p 6142 <host>
--Output Example:
-- PORT     STATE SERVICE REASON
-- 6142/tcp open  Telepad syn-ack ttl 128
-- | Telepad_check_script: 
-- |   VULNERABLE:
-- |   Telepad Remote Code Execution
-- |     State: VULNERABLE
-- |     IDs:  CVE:CVE-2022-45477
-- |     Risk factor: High  CVSSv3: 9.8 (HIGH) (AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)
-- |             The vulnerability permits remote users to send instructions to the server with the ability to execute arbitrary code without any prior authorization or authentication.
-- |           
-- |     Disclosure date: 2022-11-30
-- |     References:
-- |_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45477


local nmap = require "nmap"
local shortport = require "shortport"
local stdnse = require "stdnse"
local string = require "string"
local vulns = require "vulns"


description = [[

]]


author = "Mohammed Alshehri"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"auth", "vuln"}

local TIMEOUT = stdnse.parse_timespec(stdnse.get_script_args(SCRIPT_NAME))

function set_nmap(host, port)
	port.state = "open"
	port.version.name = "Telepad"
	port.version.product = "1.0.7"
	nmap.set_port_version(host, port)
	nmap.set_port_state(host, port, "open")
 end

function port_scan(host, port)
  local socket = nmap.new_socket()
  local status, err = socket:connect(host, port, "tcp")
  socket:close()
  if status ~= nil then
      stdnse.debug1("It's open")
    return true
  else
    return false
  end
end

portrule = shortport.port_or_service(6142, "Telepad", "tcp")
action = function(host, port)
  -- If 6142 is not open, the rest doesnt matter.
  if not port_scan(host, 6142) then
      return false
  end

  local vuln_45477 = {
    title = "Telepad Remote Code Execution",
    state = vulns.STATE.NOT_VULN,
    risk_factor = "High",
    scores = {
      CVSSv3 = "9.8 (HIGH) (AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)",
    },
    description = [[
      The vulnerability permits remote users to send instructions to the server with the ability to execute arbitrary code without any prior authorization or authentication.
    ]],
    IDS = {CVE = "CVE-2022-45477"},
    references = {
      'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45477'    },
    dates = { disclosure = { year = '2022', month = '11', day = '30' } }
  }

  local port_6143 = { number = 6143, protocol = "udp" }

  local socket = nmap.new_socket("udp")
  socket:set_timeout(500)

  for i=1,2 do
    local status = socket:sendto(host, port_6143, "1")
    if ( not(status) ) then
      return stdnse.format_output(false, "Failed to send request")
    end
  end

  local timeout = TIMEOUT or ( 3 / ( nmap.timing_level() + 1 ) )
  local stime = os.time()

  repeat
    local status, data = socket:receive()
    stdnse.debug1(data)
    if ( status ) then
      local status, lhost, lport, rhost, rport = socket:get_info()
      if status then 
        -- Not sure if the rhost would ever change but just in case 
        if rhost == host.ip then 
          vuln_45477.state = vulns.STATE.VULN
          set_nmap(host, port)
          stdnse.debug1(rhost)
        end
      end
    end
  until( os.time() - stime > timeout )
  socket:close()

  if vuln_45477.state == vulns.STATE.VULN then
    local vuln_report = vulns.Report:new(SCRIPT_NAME, host, port)
    return vuln_report:make_output(vuln_45477)
  end
  return nil
end
